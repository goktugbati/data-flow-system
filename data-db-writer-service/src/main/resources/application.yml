server:
  port: 8085

spring:
  application:
    name: data-database-writer-service
  data:
    redis:
      client-type: lettuce
      host: ${SPRING_REDIS_HOST:redis}
      port: ${SPRING_REDIS_PORT:6379}
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 50
          max-idle: 20
          min-idle: 5
      stream:
        key: data:stream
        consumer-group: db-writers
        read-timeout: 5000ms
        create-if-missing: true
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
    consumer:
      group-id: ${spring.application.name}  # This will use the service name as group ID
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 500
      properties:
        isolation.level: read_committed
        max.poll.interval.ms: 300000
        heartbeat.interval.ms: 3000
        session.timeout.ms: 45000

  # Database Configuration
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/dataflow
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc.batch_size: 50
        order_inserts: true

  # Batch Processing
  batch:
    processing:
      interval: 5000

kafka:
  topic:
    name: data-topic

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
    instances:
      kafkaConsumerCircuitBreaker:
        baseConfig: default
      redisCircuitBreaker:
        baseConfig: default
      dbWriteCircuitBreaker:
        baseConfig: default

# Monitoring Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,circuitbreakers
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
    kafka:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      kafka.client-id: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        resilience4j.circuitbreaker.calls: true

# Logging Configuration
logging:
  level:
    com.dataflow: DEBUG