services:
  data-generator:
    build:
      context: ./data-generator-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - dataflow-network

  data-filter:
    build:
      context: ./data-filter-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
      data-generator:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - dataflow-network
    volumes:
      - dataflow:/data/dataflow

  data-mongodb-writer:
      build:
        context: ./data-mongodb-writer-service
        dockerfile: Dockerfile
      environment:
        SPRING_AMQP_DESERIALIZATION_TRUST_ALL: true
      ports:
        - "8084:8084"
      depends_on:
        - kafka
        - mongodb
        - data-filter
      networks:
        - dataflow-network

  data-db-writer:
      build:
        context: ./data-db-writer-service
        dockerfile: Dockerfile
      ports:
        - "8085:8085"
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dataflow
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        SPRING_REDIS_HOST: redis
        SPRING_REDIS_PORT: 6379
      depends_on:
        - kafka
        - postgres
        - data-filter
        - redis
      networks:
        - dataflow-network

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_DB=dataflow
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dataflow-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - dataflow-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - dataflow-network
  
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - dataflow-network
    depends_on:
      - data-generator
      - data-filter
      - kafka

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dataflow-network


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - dataflow-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - dataflow-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - dataflow-network
networks:
  dataflow-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  dataflow: